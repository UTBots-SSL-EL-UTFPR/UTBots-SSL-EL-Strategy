digraph pastafarianism {
ordering=out;
graph [fontname="times-roman"];
node [fontname="times-roman"];
edge [fontname="times-roman"];
StrategyRoot [label=StrategyRoot, shape=octagon, style=filled, fillcolor=cyan, fontsize=9, fontcolor=black];
"Attack Logic" [label="Attack Logic", shape=box, style=filled, fillcolor=orange, fontsize=9, fontcolor=black];
StrategyRoot -> "Attack Logic";
"verify team ball posetion" [label="verify team ball posetion", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
"Attack Logic" -> "verify team ball posetion";
"Team Has Ball" [label="Ⓜ Team Has Ball", shape=octagon, style=filled, fillcolor=cyan, fontsize=9, fontcolor=black];
"Attack Logic" -> "Team Has Ball";
Ball_possetion [label="Ball_possetion: Simple_attack", shape=box, style=filled, fillcolor=orange, fontsize=9, fontcolor=black];
"Team Has Ball" -> Ball_possetion:" Simple_attack";
"verify simple atack" [label="verify simple atack", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
Ball_possetion:" Simple_attack" -> "verify simple atack";
context [label="context: simple atack", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
Ball_possetion:" Simple_attack" -> context:" simple atack";
Ball_possetion [label="Ball_possetion: Attack_from_recovery", shape=box, style=filled, fillcolor=orange, fontsize=9, fontcolor=black];
"Team Has Ball" -> Ball_possetion:" Attack_from_recovery";
"verify atack from recovery" [label="verify atack from recovery", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
Ball_possetion:" Attack_from_recovery" -> "verify atack from recovery";
Context [label="Context: recovery", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
Ball_possetion:" Attack_from_recovery" -> Context:" recovery";
Ball_possetion [label="Ball_possetion: with_ball_slow_attack", shape=box, style=filled, fillcolor=orange, fontsize=9, fontcolor=black];
"Team Has Ball" -> Ball_possetion:" with_ball_slow_attack";
"verify is_slow_attack" [label="verify is_slow_attack", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
Ball_possetion:" with_ball_slow_attack" -> "verify is_slow_attack";
Context [label="Context: slow_attack", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
Ball_possetion:" with_ball_slow_attack" -> Context:" slow_attack";
"Defense Logic" [label="Defense Logic", shape=box, style=filled, fillcolor=orange, fontsize=9, fontcolor=black];
StrategyRoot -> "Defense Logic";
"verify foes have ball posetion" [label="verify foes have ball posetion", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
"Defense Logic" -> "verify foes have ball posetion";
"foes Have Ball" [label="Ⓜ foes Have Ball", shape=octagon, style=filled, fillcolor=cyan, fontsize=9, fontcolor=black];
"Defense Logic" -> "foes Have Ball";
exemple_defense [label="exemple_defense", shape=box, style=filled, fillcolor=orange, fontsize=9, fontcolor=black];
"foes Have Ball" -> exemple_defense;
"verify exemple_of_defense" [label="verify exemple_of_defense", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
exemple_defense -> "verify exemple_of_defense";
"iniciar exemplo defesa" [label="iniciar exemplo defesa", shape=ellipse, style=filled, fillcolor=gray, fontsize=9, fontcolor=black];
exemple_defense -> "iniciar exemplo defesa";
}
